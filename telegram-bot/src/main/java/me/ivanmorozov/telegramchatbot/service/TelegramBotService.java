package me.ivanmorozov.telegramchatbot.service;


import lombok.extern.slf4j.Slf4j;
import me.ivanmorozov.telegramchatbot.client.ScrapperApiClient;
import me.ivanmorozov.telegramchatbot.config.TelegramBotConfig;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;
import reactor.util.retry.Retry;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;


@Service
@Slf4j
public class TelegramBotService extends TelegramLongPollingBot {
    private final TelegramBotConfig botConfig;
    private final ScrapperApiClient client;

    @Override
    public String getBotUsername() {
        return botConfig.getUsername();
    }
    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }


    public TelegramBotService(TelegramBotConfig botConfig, ScrapperApiClient client){
        this.botConfig = botConfig;
        this.client = client;
        List<BotCommand> listCommand = new ArrayList<>();
        listCommand.add(new BotCommand("/start", "–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"));
        listCommand.add(new BotCommand("/track", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ"));
        listCommand.add(new BotCommand("/untrack", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"));
        listCommand.add(new BotCommand("/help", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å"));
        listCommand.add(new BotCommand("/list", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏"));
        try {
            this.execute(new SetMyCommands(listCommand, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e){
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {}", e.getMessage());
        }
    }


    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()){
             String msg = update.getMessage().getText();
             long chatId = update.getMessage().getChatId();
             String userName = update.getMessage().getChat().getFirstName();

            try {

                switch (msg) {
                    case "/start" -> startCommand(chatId, userName);
                    case "/help" -> sendMsg(chatId, HELP_TEXT);

                    default -> sendMsg(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :(");
                }
            } catch (TelegramApiException e) {
                throw new RuntimeException(e);
            }

        }
    }
    private void startCommand(long chatId, String userName) throws TelegramApiException {
        String safeName = userName != null ? userName : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        sendMsg(chatId, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, " + safeName + "...");

        try {
            boolean isRegistered = Boolean.TRUE.equals(client.isChatRegister(chatId)
                    .block(Duration.ofSeconds(5)));

            if (isRegistered) {
                sendMsg(chatId, "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
            } else {
                sendMsg(chatId, "üîÑ –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–ø–æ–ª–Ω—è—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...");

                boolean success = Boolean.TRUE.equals(client.registerChat(chatId)
                        .block(Duration.ofSeconds(5)));

                String resultMsg = success ? START_TEXT : "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                sendMsg(chatId, resultMsg);
            }
        } catch (Exception e) {
            sendMsg(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
            log.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: id " + chatId  + "/ msg - " +   e.getMessage());
        }
    }
/*    private Mono<Void> startCommand(long chatId, String userName) throws TelegramApiException {
        String greeting = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, " + userName + ", –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –¥–∞–≤–∞–π —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é";
return Mono.fromRunnable(()->sendMsg(chatId,greeting))
        .then(client.isChatRegister(chatId))
        .flatMap(isRegister -> {
            if (isRegister){
                String msg = "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ, –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ;)";
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (chatId={}) —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", userName, chatId);
                return Mono.fromRunnable(()->sendMsg(chatId,msg));
            }
            return client.registerChat(chatId)
                    .flatMap(success -> {
                        String resultMsg = success ?
                                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ" :
                                "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                        if (success) {
                            log.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} - |id| - {}", userName, chatId);
                        }
                        return Mono.fromRunnable(()->sendMsg(chatId,resultMsg));

                    });

        })
        .subscribeOn(Schedulers.boundedElastic())
        .onErrorResume(e-> {
            log.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è chatId={}: {}", chatId, e.getMessage());
            return Mono.fromRunnable(() ->
                    sendMsg(chatId, "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã"));
        })
        .then();
    }*/

    private void trackCommand(long chatId, String link) throws TelegramApiException{
        String answer = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Å—Å—ã–ª–∫–µ: " + link;

        // –ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏

        sendMsg(chatId, answer);
    }
    private void unTrackCommand(long chatId, String link) throws TelegramApiException{
        String answer = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Å—Å—ã–ª–∫–µ: " + link;

        // –ª–æ–≥–∏–∫–∞ –æ—Ç–ø–æ–ø–∏—Å–∫–∏

        sendMsg(chatId, answer);
    }


    private void sendMsg(long chatId, String textSend) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(textSend);

        try {
            execute(sendMessage);
        } catch (TelegramApiException te){
            log.error("ERROR / : "  + te.getMessage());
        }
    }
    private Mono<Void> sendReactiveMsg(long chatId, String textSend){
        return Mono.fromRunnable(()->sendMsg(chatId,textSend))
                .subscribeOn(Schedulers.boundedElastic()).then();
    }

    final String START_TEXT = """
            ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!
            \uD83D\uDCE2 *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*
            1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/track https://example.com`
            2. –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö \s
            """;
    final String HELP_TEXT = "\uD83D\uDCDA *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n" +
            "\n" +
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
            "`/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
            "`/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
            "`/track <—Å—Å—ã–ª–∫–∞>` - –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n" +
            "`/untrack <—Å—Å—ã–ª–∫–∞>` - –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n" +
            "`/list` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏\n" +
            "`/settings` - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n" +
            "\n" +
            "\uD83D\uDCE2 *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n" +
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/track https://example.com`\n" +
            "2. –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö  \n" +
            "\n" +
            "\uD83D\uDEE0 *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*:\n" +
            "–ê –∫–æ–º—É —Å–µ–π—á–∞—Å –ª–µ–≥–∫–æ?\n" +
            "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ù—É –∏ —Ö—É–π –±—ã —Å –Ω–∏–º!";
}
