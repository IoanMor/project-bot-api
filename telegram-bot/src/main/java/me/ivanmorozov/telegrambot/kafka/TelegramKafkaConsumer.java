package me.ivanmorozov.telegrambot.kafka;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import me.ivanmorozov.common.kafka.KafkaTopics;
import me.ivanmorozov.common.kafka.MessageTypes;

import me.ivanmorozov.common.records.KafkaRecords;


import me.ivanmorozov.telegrambot.client.MessageTelegramClient;
import me.ivanmorozov.telegrambot.cache.RegistrationCache;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import java.util.*;

import static me.ivanmorozov.common.constMsg.Msg.START_TEXT;
import static me.ivanmorozov.common.kafka.KafkaDataTypeKey.*;

@Service
@RequiredArgsConstructor
@Slf4j
public class TelegramKafkaConsumer {
    private final RegistrationCache cache;
    private final MessageTelegramClient sendMessage;

    @KafkaListener(topics = KafkaTopics.RESPONSE_TOPIC, groupId = "telegram-bot-group")
    public void handleResponse(KafkaRecords.KafkaResponse response) {
        Map<String, Object> dataMap = response.data() != null ? (Map<String, Object>) response.data() : Collections.emptyMap();

        log.info("[-.] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {}", response);
        try {
            switch (response.type()) {
                case MessageTypes.CREATED -> {
                    sendMessage.sendMessageClient(response.chatId(), "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! " + START_TEXT).subscribe();
                }
                case MessageTypes.NOT_CREATED -> {
                    sendMessage.sendMessageClient(response.chatId(), "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ").subscribe();
                }
                case MessageTypes.EXIST_CHAT_REGISTER -> {
                    sendMessage.sendMessageClient(response.chatId(), "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.").subscribe();
                }
                case MessageTypes.EXIST_CHAT_CHECK -> {
                    cache.setRegistered(response.chatId(), (boolean) dataMap.get(EXIST_KEY));
                }
                case MessageTypes.EXIST_SUBSCRIBE_LINK -> {
                    sendMessage.sendMessageClient(response.chatId(), "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É").subscribe();
                }
                case MessageTypes.SUCCESS -> {
                    String key = dataMap.keySet().iterator().next().toString();
                    String value = dataMap.get(key).toString();
                    sendMessage.sendMessageClient(response.chatId(), "‚ÑπÔ∏è –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ " + key + "[" + value + "]").subscribe();

                }

                case MessageTypes.UNSUBSCRIBE_RESULT_LINK -> {
                    if (dataMap.containsKey(LINK_KEY)) {
                        boolean isSuccess = (boolean) dataMap.get(LINK_KEY);
                        if (isSuccess) {
                            sendMessage.sendMessageClient(response.chatId(), "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π").subscribe();
                        } else {
                            sendMessage.sendMessageClient(response.chatId(), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã").subscribe();
                        }
                    }
                }

                case MessageTypes.GET_ALL_LINKS -> {
                    Set<String> links = new HashSet<>();
                    Object value = dataMap.get(LINK_KEY);
                    if (value instanceof Collection<?>) {
                        for (Object obj : (Collection<?>) value) {
                            links.add(obj.toString());
                        }
                    }
                    if (!links.isEmpty()) {
                        StringBuilder message = new StringBuilder("üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n");
                        int i = 1;
                        for (String link : links) {
                            message.append(i++).append(" - ").append(link).append("\n");
                        }
                        sendMessage.sendMessageClient(response.chatId(), message.toString()).subscribe();
                    } else {
                        sendMessage.sendMessageClient(response.chatId(), "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫").subscribe();
                    }
                }

                case MessageTypes.ACCEPTED -> {
                    try {
                        if (dataMap.get(STOCK_KEY).equals(false)) {
                            sendMessage.sendMessageClient(response.chatId(), "‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞(–ê–∫—Ü–∏–∏), –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å").subscribe();
                            return;
                        } else {
                            String ticker = (String) dataMap.get(STOCK_KEY);
                            sendMessage.sendMessageClient(response.chatId(), "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: " + ticker).subscribe();
                        }
                    } catch (Exception e) {
                        sendMessage.sendMessageClient(response.chatId(), "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞").subscribe();
                    }
                }
                case MessageTypes.EXIST_SUBSCRIBE_STOCK -> {
                    sendMessage.sendMessageClient(response.chatId(), "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ä(–ê–∫—Ü–∏—é)").subscribe();
                }
                case MessageTypes.GET_ALL_STOCK -> {
                    StringBuilder message = new StringBuilder("üìã –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–∏—Å—É—é—â–∏—Ö –≤–∞—Å –∞–∫—Ü–∏–π:\n");
                    int counter = 1;
                    for (var entry : dataMap.entrySet()) {
                        String stock = (String) entry.getKey();
                        Double price = ((Number) entry.getValue()).doubleValue();
                        message.append(counter++)
                                .append(" - ")
                                .append(stock)
                                .append(" - rub.")
                                .append(price != null ? String.format("%.2f", price) : "N/A")
                                .append("\n");
                    }
                    sendMessage.sendMessageClient(response.chatId(), message.toString()).subscribe();
                }
                case MessageTypes.UNSUBSCRIBE_RESULT_STOCK -> {
                    if (dataMap.containsKey(STOCK_KEY)) {
                        boolean isSuccess = (boolean) dataMap.get(STOCK_KEY);
                        if (isSuccess) {
                            sendMessage.sendMessageClient(response.chatId(), "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–∏–∫–µ—Ä–∞(–ê–∫—Ü–∏–∏)").subscribe();
                        } else {
                            sendMessage.sendMessageClient(response.chatId(), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ä(–ê–∫—Ü–∏—é)").subscribe();
                        }
                    }
                }
                case MessageTypes.STOCK_SHEDULED_MSG -> {
                    sendMessage.sendMessageClient(response.chatId(), dataMap.get(STOCK_KEY).toString()).subscribe();
                }
                default -> {
                    log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {}", response.type());
                    sendMessage.sendMessageClient(response.chatId(), "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞").subscribe();
                }
            }
        } catch (Exception e) {
            log.error("[.] –û—à–∏–±–∫–∞ KafkaListener. –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {}, chatId: {}, –¥–∞–Ω–Ω—ã–µ: {}, –æ—à–∏–±–∫–∞: {}",
                    response.type(), response.chatId(), response.data(), e.getMessage(), e);
            sendMessage.sendMessageClient(response.chatId(), "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").subscribe();
            throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: " + response.type());
        }
    }

}
