package me.ivanmorozov.telegrambot.service;


import lombok.extern.slf4j.Slf4j;
import me.ivanmorozov.telegrambot.client.ScrapperApiClient;
import me.ivanmorozov.scrapper.client.StockApiClient;
import me.ivanmorozov.telegrambot.config.TelegramBotConfig;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

import static me.ivanmorozov.common.constMsg.Msg.*;
import static me.ivanmorozov.common.linkUtil.LinkUtilStackOverFlow.parseQuestionId;

import java.math.BigDecimal;
import java.time.Duration;
import java.util.*;


@Service
@Slf4j
public class TelegramBotService extends TelegramLongPollingBot {
    private final TelegramBotConfig botConfig;
    private final ScrapperApiClient client;
    private final StockApiClient stockClient;

    @Override
    public String getBotUsername() {
        return botConfig.getUsername();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }


    public TelegramBotService(TelegramBotConfig botConfig, ScrapperApiClient client, StockApiClient stackClient) {
        this.botConfig = botConfig;
        this.client = client;
        this.stockClient = stackClient;


        List<BotCommand> listCommand = new ArrayList<>();
        listCommand.add(new BotCommand("/start", "–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"));
        listCommand.add(new BotCommand("/track", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ"));
        listCommand.add(new BotCommand("/untrack", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"));
        listCommand.add(new BotCommand("/tstock", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"));
        listCommand.add(new BotCommand("/utstock", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"));
        listCommand.add(new BotCommand("/links", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏"));
        listCommand.add(new BotCommand("/stock", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏"));
        listCommand.add(new BotCommand("/help", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å"));
        try {
            this.execute(new SetMyCommands(listCommand, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {}", e.getMessage());
        }
    }


    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }
        try {
            String msg = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            String userName = update.getMessage().getChat().getFirstName();

            if (msg.startsWith("/start")) {
                startCommand(chatId, userName);
                return;
            }

            if (!isChatRegister(chatId)) {
                sendMsg(chatId, "‚õî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
                return;
            }

            if (msg.startsWith("/track")) {
                handleTrackCommand(msg, chatId);
            }
            else if (msg.startsWith("/untrack")) {
                unTrackCommand(chatId, msg);
            }
            else if (msg.startsWith("/tstock")) {
                trackStock(chatId, msg);
            }
            else if (msg.startsWith("/utstock")) {
                untrackStock(chatId, msg);
            }
            else if (msg.startsWith("/stock")) {
                getAllStockSubscribes(chatId);
            }
            else if (msg.startsWith("/links")) {
                getAllLinksSubscribes(chatId);
            }
            else if ("/help".equalsIgnoreCase(msg)) {
                sendMsg(chatId, HELP_TEXT);
            }
            else {
                sendMsg(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥");
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {}", e.getMessage());
            if (update.hasMessage()) {
                try {
                    sendMsg(update.getMessage().getChatId(), "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã");
                } catch (Exception ex) {
                    log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {}", ex.getMessage());
                }
            }
        }
    }


    private void startCommand(long chatId, String userName) throws TelegramApiException {
        String safeName = userName != null ? userName : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        sendMsg(chatId, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, " + safeName + "...");

        try {
            boolean isRegistered = Boolean.TRUE.equals(client.isChatRegister(chatId)
                    .block(Duration.ofSeconds(5)));

            if (isRegistered) {
                sendMsg(chatId, "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
            } else {
                sendMsg(chatId, "üîÑ –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–ø–æ–ª–Ω—è—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...");

                boolean success = Boolean.TRUE.equals(client.registerChat(chatId)
                        .block(Duration.ofSeconds(5)));

                String resultMsg = success ? START_TEXT : "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                sendMsg(chatId, resultMsg);
            }
        } catch (Exception e) {
            sendMsg(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
            log.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: id " + chatId + "/ msg - " + e.getMessage());
        }
    }


    private void handleTrackCommand(String linkMsg, long chatId) throws TelegramApiException {

        String[] parts = linkMsg.split("\\s+", 2);
        if (parts.length < 2) {
            sendMsg(chatId, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /track <—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–æ–ø—Ä–æ—Å>");
            return;
        }
        String link = parts[1].trim();
        Optional<Long> questionIdOp = parseQuestionId(link);

        if (questionIdOp.isEmpty()) {
            sendMsg(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /track https://stackoverflow.com/questions/12345");
            return;
        }

        try {
            Boolean alreadySubscribed = client.isLinkSubscribe(chatId, link)
                    .timeout(Duration.ofSeconds(3))
                    .block();

            if (Boolean.TRUE.equals(alreadySubscribed)) {
                sendMsg(chatId, "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å");
                return;
            }
            Boolean subscriptionResult = client.subscribeLink(chatId, link)
                    .timeout(Duration.ofSeconds(5))
                    .block();

            if (Boolean.TRUE.equals(subscriptionResult)) {
                sendMsg(chatId, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: " + link);
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è: chatId={}, questionId={}", chatId, questionIdOp.get());
            } else {
                sendMsg(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É)");
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ chatId={}: {}", chatId, e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    }


    private void unTrackCommand(long chatId, String linkMsg) throws TelegramApiException {
        String[] parts = linkMsg.split("\\s+", 2);
        if (parts.length < 2) {
            sendMsg(chatId, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /untrack <—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–æ–ø—Ä–æ—Å>");
            return;
        }
        String link = parts[1].trim();

        try {
            Boolean isUnTruck = client.unsubscribeLink(chatId, link)
                    .timeout(Duration.ofSeconds(5))
                    .block();
            if (Boolean.TRUE.equals(isUnTruck)) {
                sendMsg(chatId, "‚ÑπÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Å—Å—ã–ª–∫–µ: " + link);
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: chatId={}, link={}", chatId, link);
            } else {
                sendMsg(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É)");
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ chatId={}: {}", chatId, e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }

    }

    private void getAllLinksSubscribes(long chatId) {
        Set<String> links = client.getAllLinks(chatId)
                .timeout(Duration.ofSeconds(5))
                .block();
        if (links == null || links.isEmpty()) {
            sendMsg(chatId, "‚ÑπÔ∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É");
        } else {
            StringBuilder message = new StringBuilder("üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n");
            int i = 1;
            for (String link : links) {
                message.append(i++).append(" - ").append(link).append("\n");
            }
            sendMsg(chatId, message.toString());
        }
    }

    public void trackStock(long chatId, String userMsg) {
        String[] parts = userMsg.split("\\s+", 2);
        if (parts.length < 2) {
            sendMsg(chatId, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tSock <—Ç–∏–∫–µ—Ä_–∞–∫—Ü–∏–∏>");
            return;
        }
        String ticker = parts[1].trim();

        if (ticker.isBlank() || ticker==null) {
            sendMsg(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /tStock AAPL (–ø—Ä–∏–º–µ—Ä –∞–∫—Ü–∏–∏ Apple)");
            return;
        }

        try {
            boolean isStock = Boolean.TRUE.equals(client.isExistStock(chatId, ticker)
                    .timeout(Duration.ofSeconds(5))
                    .block());
            if (isStock) {
                sendMsg(chatId, "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ä(–ê–∫—Ü–∏—é)");
                return;
            }
            boolean subscribe = Boolean.TRUE.equals(client.subscribeStock(chatId, ticker)
                    .timeout(Duration.ofSeconds(5))
                    .block());
            if (subscribe) {
                sendMsg(chatId, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: " + ticker);
                log.info("–ü–æ–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ü–∏—é –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ,{}|{}", chatId, ticker);
            } else {
                sendMsg(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä)");
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∞–∫—Ü–∏—é {}|{}", ticker, e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –ü—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
        }
    }

    public void untrackStock(long chatId, String userMsg) {
        String[] parts = userMsg.split("\\s+", 2);
        if (parts.length < 2) {
            sendMsg(chatId, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /utSock <—Ç–∏–∫–µ—Ä_–∞–∫—Ü–∏–∏>");
            return;
        }
        String ticker = parts[1].trim();

        try {
            boolean isDelete = Boolean.TRUE.equals(client.unSubscribeStock(chatId, ticker).timeout(Duration.ofSeconds(5)).block());
            if (isDelete) {
                sendMsg(chatId, "‚ÑπÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –ê–∫—Ü–∏–∏, —Ç–∏–∫–µ—Ä : " + ticker);
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: chatId={}, ticker={}", chatId, ticker);
            } else {
                sendMsg(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä)");
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∞–∫—Ü–∏–∏ chatId={}: {}", chatId, e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }

    }

    public void getAllStockSubscribes(long chatId) {
        Set<String> stock = client.getSubscribeStock(chatId).timeout(Duration.ofSeconds(5)).block();
        if (stock == null || stock.isEmpty()) {
            sendMsg(chatId, "‚ÑπÔ∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∞–∫—Ü–∏—é");
        } else {

            StringBuilder message = new StringBuilder("üìã –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–∏—Å—É—é—â–∏—Ö –≤–∞—Å –∞–∫—Ü–∏–π:\n");
            int i = 1;
            for (String oneStock : stock) {
                BigDecimal price = stockClient.getPrice(oneStock).timeout(Duration.ofSeconds(5)).block();
                message.append(i++).append(" - ").append(oneStock).append(" - rub.").append(price).append("\n");
            }
            sendMsg(chatId, message.toString());
        }
    }


    public void sendMsg(long chatId, String textSend) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(textSend);

        try {
            execute(sendMessage);
        } catch (TelegramApiException te) {
            log.error("ERROR / : " + te.getMessage());
        }
    }

    public Mono<Void> sendReactiveMsg(long chatId, String textSend) {
        return Mono.fromRunnable(() -> sendMsg(chatId, textSend))
                .subscribeOn(Schedulers.boundedElastic()).then();
    }


    private boolean isChatRegister(long chatId) {
        return Boolean.TRUE.equals(client.isChatRegister(chatId).timeout(Duration.ofSeconds(5)).block());
    }

}
