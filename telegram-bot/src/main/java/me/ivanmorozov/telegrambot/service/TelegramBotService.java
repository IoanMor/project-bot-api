package me.ivanmorozov.telegrambot.service;


import lombok.extern.slf4j.Slf4j;
import me.ivanmorozov.telegrambot.config.TelegramBotConfig;
import me.ivanmorozov.telegrambot.service.kafka.TelegramKafkaProducer;
import me.ivanmorozov.telegrambot.util.RegistrationCache;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

import static me.ivanmorozov.common.constMsg.Msg.*;
import static me.ivanmorozov.common.linkUtil.LinkUtilStackOverFlow.parseQuestionId;


import java.util.*;



@Service
@Slf4j
public class TelegramBotService extends TelegramLongPollingBot {
    private final TelegramBotConfig botConfig;
    private final RegistrationCache cache;
    private final TelegramKafkaProducer kafkaProducer;


    @Override
    public String getBotUsername() {
        return botConfig.getUsername();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }


    public TelegramBotService(TelegramBotConfig botConfig, RegistrationCache cache, TelegramKafkaProducer kafkaProducer) {
        this.botConfig = botConfig;
        this.cache = cache;
        this.kafkaProducer = kafkaProducer;


        List<BotCommand> listCommand = new ArrayList<>();
        listCommand.add(new BotCommand("/start", "–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"));
        listCommand.add(new BotCommand("/track", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ"));
        listCommand.add(new BotCommand("/untrack", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"));
        listCommand.add(new BotCommand("/tstock", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"));
        listCommand.add(new BotCommand("/utstock", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"));
        listCommand.add(new BotCommand("/links", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏"));
        listCommand.add(new BotCommand("/stock", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏"));
        listCommand.add(new BotCommand("/help", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å"));
        try {
            this.execute(new SetMyCommands(listCommand, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {}", e.getMessage());
        }
    }


    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }
        try {
            String msg = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            String userName = update.getMessage().getChat().getFirstName();

            if (msg.startsWith("/start")) {
                startCommand(chatId, userName);
                return;
            }

            if (!isChatRegister(chatId)) {
                sendMsg(chatId, "‚õî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
                return;
            }

            if (msg.startsWith("/track")) {
                handleTrackCommand(msg, chatId);
            } else if (msg.startsWith("/untrack")) {
                unTrackCommand(chatId, msg);
            } else if (msg.startsWith("/tstock")) {
                trackStock(chatId, msg);
            } else if (msg.startsWith("/utstock")) {
                untrackStock(chatId, msg);
            } else if (msg.startsWith("/stock")) {
                getAllStockSubscribes(chatId);
            } else if (msg.startsWith("/links")) {
                getAllLinksSubscribes(chatId);
            } else if ("/help".equalsIgnoreCase(msg)) {
                sendMsg(chatId, HELP_TEXT);
            } else {
                sendMsg(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥");
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {}", e.getMessage());
            if (update.hasMessage()) {
                try {
                    sendMsg(update.getMessage().getChatId(), "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã");
                } catch (Exception ex) {
                    log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {}", ex.getMessage());
                }
            }
        }
    }


    private void startCommand(long chatId, String userName)  {
        try {
            String safeName = userName != null ? userName : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
            sendMsg(chatId, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, " + safeName + "...");
            kafkaProducer.sendChatRegisterRequest(chatId);
            sendMsg(chatId, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...");
        } catch (Exception e) {
            sendMsg(chatId, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            log.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∫–ª–∞—Å—Å–µ TelegramBotService –º–µ—Ç–æ–¥–∞ startcommand, [{}]", e.getMessage());
        }

    }


    private void handleTrackCommand(String linkMsg, long chatId)  {

        String[] parts = linkMsg.split("\\s+", 2);
        if (parts.length < 2) {
            sendMsg(chatId, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /track <—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–æ–ø—Ä–æ—Å>");
            return;
        }
        String link = parts[1].trim();
        Optional<Long> questionIdOp = parseQuestionId(link);
        if (questionIdOp.isEmpty()) {
            sendMsg(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /track https://stackoverflow.com/questions/12345");
            return;
        }
        try {
            kafkaProducer.sendSubscribeLinkRequest(chatId, link);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ chatId={}: {}", chatId, e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    }


    private void unTrackCommand(long chatId, String linkMsg)  {
        String[] parts = linkMsg.split("\\s+", 2);
        if (parts.length < 2) {
            sendMsg(chatId, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /untrack <—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–æ–ø—Ä–æ—Å>");
            return;
        }
        String link = parts[1].trim();
        try {
            kafkaProducer.sendUnSubscribeLinkRequest(chatId, link);
            sendMsg(chatId, "‚åõ –ò–¥—ë—Ç –æ—Ç–ø–∏—Å–∫–∞...");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ chatId={}: {}", chatId, e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    }

    private void getAllLinksSubscribes(long chatId) {
        try {
            kafkaProducer.sendAllSubscribeLinksRequest(chatId);
        } catch (Exception e) {
            log.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∫–ª–∞—Å—Å–µ TelegramBotService –º–µ—Ç–æ–¥–∞ getAllLinksSubscribes, [{}]", e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    }

    public void trackStock(long chatId, String userMsg) {
        String[] parts = userMsg.split("\\s+", 2);
        if (parts.length < 2) {
            sendMsg(chatId, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tSock <—Ç–∏–∫–µ—Ä_–∞–∫—Ü–∏–∏>");
            return;
        }
        String ticker = parts[1].trim();

        if (ticker.isBlank() || ticker == null) {
            sendMsg(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /tStock SBER (–ø—Ä–∏–º–µ—Ä –∞–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫)");
            return;
        }
        try {
           kafkaProducer.sendSubscribeStockRequest(chatId,ticker);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∞–∫—Ü–∏—é {}|{}", ticker, e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –ü—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
        }
    }

    public void untrackStock(long chatId, String userMsg) {
        String[] parts = userMsg.split("\\s+", 2);
        if (parts.length < 2) {
            sendMsg(chatId, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /utstock <—Ç–∏–∫–µ—Ä_–∞–∫—Ü–∏–∏>");
            return;
        }
        String ticker = parts[1].trim();

        try {
          kafkaProducer.sendUnSubscribeStockRequest(chatId,ticker);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∞–∫—Ü–∏–∏ chatId={}: {}", chatId, e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }

    }

    public void getAllStockSubscribes(long chatId) {
        try {
           kafkaProducer.sendGetStockSubscribeRequest(chatId);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è chatId {}: {}", chatId, e.getMessage());
            sendMsg(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }


    public void sendMsg(long chatId, String textSend) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(textSend);

        try {
            execute(sendMessage);
        } catch (TelegramApiException te) {
            log.error("ERROR / : " + te.getMessage());
        }
    }

    public Mono<Void> sendReactiveMsg(long chatId, String textSend) {
        return Mono.fromRunnable(() -> sendMsg(chatId, textSend))
                .subscribeOn(Schedulers.boundedElastic()).then();
    }

    public boolean isChatRegister(long chatId) throws TelegramApiException {

        Boolean cachedStatus = cache.isRegistered(chatId);
        if (cachedStatus != null) {
            return cachedStatus;
        }


        kafkaProducer.sendIsChatRegisterRequest(chatId);


        long startTime = System.currentTimeMillis();
        while (System.currentTimeMillis() - startTime < 5000) {
            try {
                Thread.sleep(200);
                Boolean status = cache.isRegistered(chatId);
                if (status != null) {
                    return status;
                }

            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new TelegramApiException("–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ");
            }
        }
        sendMsg(chatId, "‚åõ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
        return false;
    }


}
